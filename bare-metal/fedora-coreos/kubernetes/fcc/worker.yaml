---
variant: fcos
version: 1.4.0
systemd:
  units:
    - name: containerd.service
      enabled: true
    - name: docker.service
      mask: true
    - name: kubelet-env-watcher.service
      contents: |
        [Unit]
        Description=Restart kubelet
        StartLimitIntervalSec=0
        [Service]
        Type=oneshot
        ExecStart=-/usr/bin/systemctl --job-mode=fail try-restart kubelet.service
        [Install]
        WantedBy=multi-user.target
    - name: kubelet-env-watcher.path
      #enabled: true
      contents: |
        [Unit]
        Description=Watch for modified kubelet.env
        After=kubelet.service
        [Path]
        PathChanged=/etc/kubernetes/kubelet.env
        [Install]
        WantedBy=multi-user.target
    - name: wait-for-dns.service
      enabled: true
      contents: |
        [Unit]
        Description=Wait for DNS entries
        Before=kubelet.service
        [Service]
        Type=oneshot
        RemainAfterExit=true
        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf > /dev/null; do sleep 1; done'
        [Install]
        RequiredBy=kubelet.service
    - name: kubelet.service
      contents: |
        [Unit]
        Description=Kubelet (System Container)
        Wants=rpc-statd.service
        StartLimitIntervalSec=0
        [Service]
        EnvironmentFile=/etc/kubernetes/kubelet.env
        ExecStartPre=/bin/mkdir -p /etc/cni/net.d
        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests
        ExecStartPre=/bin/mkdir -p /opt/cni/bin
        ExecStartPre=/bin/mkdir -p /var/lib/calico
        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins
        ExecStartPre=/usr/bin/bash -c "grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d > /etc/kubernetes/ca.crt"
        ExecStartPre=-/usr/bin/podman rm kubelet
        # The two SELinux mounts are needed so that mount can properly detect a system with enabled SELinux.
        # See https://github.com/rook/rook/issues/7575#issuecomment-1039954280.
        ExecStart=/usr/bin/podman run --name kubelet \
          --privileged \
          --pid host \
          --network host \
          --volume /etc/cni/net.d:/etc/cni/net.d:ro,z \
          --volume /etc/kubernetes:/etc/kubernetes:ro,z \
          --volume /usr/lib/os-release:/etc/os-release:ro \
          --volume /lib/modules:/lib/modules:ro \
          --volume /run:/run \
          --volume /dev:/dev \
          --volume /sys/fs/cgroup:/sys/fs/cgroup \
          --volume /var/lib/calico:/var/lib/calico:ro \
          --volume /var/lib/containerd:/var/lib/containerd \
          --volume /var/lib/kubelet:/var/lib/kubelet:rshared \
          --volume /var/log:/var/log \
          --volume /var/run/lock:/var/run/lock:z \
          --volume /opt/cni/bin:/opt/cni/bin:z \
          --volume /etc/selinux:/etc/selinux:ro \
          --volume /sys/fs/selinux:/sys/fs/selinux:ro \
%{ if enable_rbd_nbd == "true" ~}
          --volume /etc/modprobe.d/rbd-nbd.conf:/etc/modprobe.d/rbd-nbd.conf \
%{ endif ~}
          $${KUBELET_IMAGE_URL}:$${KUBELET_IMAGE_TAG} \
          ${kubelet_worker_extra_arguments}
          --anonymous-auth=false \
          --authentication-token-webhook \
          --authorization-mode=Webhook \
          --bootstrap-kubeconfig=/etc/kubernetes/kubeconfig \
          --cgroup-driver=systemd \
          --cgroups-per-qos=true \
          --container-runtime=remote \
          --container-runtime-endpoint=unix:///run/containerd/containerd.sock \
          --enforce-node-allocatable=pods \
          --client-ca-file=/etc/kubernetes/ca.crt \
          --cluster_dns=${cluster_dns_service_ip} \
          --cluster_domain=${cluster_domain_suffix} \
          --healthz-port=0 \
          --hostname-override=${domain_name} \
          --kubeconfig=/var/lib/kubelet/kubeconfig \
          --node-labels=node.kubernetes.io/node \
          %{~ for label in compact(split(",", node_labels)) ~}
          --node-labels=${label} \
          %{~ endfor ~}
          %{~ for taint in compact(split(",", node_taints)) ~}
          --register-with-taints=${taint} \
          %{~ endfor ~}
          --pod-manifest-path=/etc/kubernetes/manifests \
          --read-only-port=0 \
          --resolv-conf=/run/systemd/resolve/resolv.conf \
          --rotate-certificates \
          --volume-plugin-dir=/var/lib/kubelet/volumeplugins
        ExecStop=-/usr/bin/podman stop kubelet
        Delegate=yes
        Restart=always
        RestartSec=10
        [Install]
        WantedBy=multi-user.target
    - name: kubelet.path
      enabled: true
      contents: |
        [Unit]
        Description=Watch for kubeconfig
        [Path]
        PathExists=/etc/kubernetes/kubeconfig
        [Install]
        WantedBy=multi-user.target
storage:
  directories:
    - path: /etc/kubernetes
  files:
    - path: /etc/kubernetes/kubelet.env
      mode: 0644
      contents:
        inline: |
          KUBELET_IMAGE_URL=${kubelet_image}
          KUBELET_IMAGE_TAG=${kubelet_tag}
    - path: /etc/hostname
      mode: 0644
      contents:
        inline:
          ${domain_name}
    - path: /etc/sysctl.d/max-user-watches.conf
      contents:
        inline: |
          fs.inotify.max_user_watches=1048576
          fs.inotify.max_user_instances=2048
%{ if enable_rbd_nbd == "true" ~}
    - path: /etc/modprobe.d/rbd-nbd.conf
      contents:
        inline: |
          install rbd /bin/true
          options nbd nbds_max=256
%{ endif ~}
    - path: /etc/sysctl.d/reverse-path-filter.conf
      contents:
        inline: |
          net.ipv4.conf.default.rp_filter=0
          net.ipv4.conf.*.rp_filter=0
    - path: /etc/systemd/network/50-flannel.link
      contents:
        inline: |
          [Match]
          OriginalName=flannel*
          [Link]
          MACAddressPolicy=none
    - path: /etc/systemd/system.conf.d/accounting.conf
      contents:
        inline: |
          [Manager]
          DefaultCPUAccounting=yes
          DefaultMemoryAccounting=yes
          DefaultBlockIOAccounting=yes
    - path: /etc/fedora-coreos/iptables-legacy.stamp
    - path: /etc/containerd/config.toml
      overwrite: true
      contents:
        inline: |
          version = 2
          root = "/var/lib/containerd"
          state = "/run/containerd"
          subreaper = true
          oom_score = -999
          [grpc]
          address = "/run/containerd/containerd.sock"
          uid = 0
          gid = 0
          [plugins."io.containerd.grpc.v1.cri"]
          enable_selinux = true
          [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc]
          runtime_type = "io.containerd.runc.v2"
          [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc.options]
          SystemdCgroup = true
          [plugins."io.containerd.grpc.v1.cri".registry]
          config_path = "/etc/containerd/certs.d"
    - path: /etc/systemd/system/containerd.service
      contents:
        inline: |
          # This replaces the containerd unit file supplied by Fedora with an adapted
          # version of the unit file supplied by the containerd project.
          # See https://github.com/containerd/containerd/blob/release/1.5/containerd.service.
          # The version for containerd 1.6 is the same at the time of writing so an update by
          # Fedora from 1.5 to 1.6 should require no changes here.
          [Unit]
          Description=containerd container runtime
          Documentation=https://containerd.io
          After=network.target local-fs.target
          
          [Service]
          ExecStartPre=-/sbin/modprobe overlay
          ExecStart=/usr/bin/containerd
          
          Type=notify
          Delegate=yes
          KillMode=process
          Restart=always
          RestartSec=5
          LimitNPROC=infinity
          LimitCORE=infinity
          # Upstream uses infinity here now (used to be 1048576 in previous release of containerd) but we've seen 
          # problems with HAProxy with this setting.
          LimitNOFILE=1048576
          TasksMax=infinity
          OOMScoreAdjust=-999
          
          [Install]
          WantedBy=multi-user.target
passwd:
  users:
    - name: core
      ssh_authorized_keys:
        - ${ssh_authorized_key}

