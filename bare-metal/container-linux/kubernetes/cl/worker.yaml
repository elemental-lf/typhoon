---
systemd:
  units:
    - name: docker.service
      enable: true
    - name: locksmithd.service
      mask: true
    - name: kubelet.path
      enable: true
      contents: |
        [Unit]
        Description=Watch for kubeconfig
        [Path]
        PathExists=/etc/kubernetes/kubeconfig
        [Install]
        WantedBy=multi-user.target
    - name: kubelet-env-watcher.service
      enable: true
      contents: |
        [Unit]
        Description=Restart kubelet
        [Service]
        Type=oneshot
        ExecStart=/usr/bin/systemctl restart kubelet.service
        [Install]
        WantedBy=multi-user.target
    - name: kubelet-env-watcher.path
      enable: true
      contents: |
        [Unit]
        Description=Watch for modified kubelet.env
        [Path]
        PathChanged=/etc/kubernetes/kubelet.env
        [Install]
        WantedBy=multi-user.target
    - name: wait-for-dns.service
      enable: true
      contents: |
        [Unit]
        Description=Wait for DNS entries
        Wants=systemd-resolved.service
        Before=kubelet.service
        [Service]
        Type=oneshot
        RemainAfterExit=true
        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf > /dev/null; do sleep 1; done'
        [Install]
        RequiredBy=kubelet.service
    - name: kubelet.service
      contents: |
        [Unit]
        Description=Kubelet via Hyperkube
        Wants=rpc-statd.service
        [Service]
        EnvironmentFile=/etc/kubernetes/kubelet.env
        Environment=KUBELET_CGROUP_DRIVER=${cgroup_driver}
        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d
        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests
        ExecStartPre=/bin/mkdir -p /opt/cni/bin
        ExecStartPre=/bin/mkdir -p /var/lib/calico
        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins
        ExecStartPre=/usr/bin/bash -c "grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d > /etc/kubernetes/ca.crt"
        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid
        ExecStart=/usr/bin/rkt run \
          --uuid-file-save=/var/cache/kubelet-pod.uuid \
          --stage1-from-dir=stage1-fly.aci \
          --hosts-entry host \
          --insecure-options=image \
          --volume etc-kubernetes,kind=host,source=/etc/kubernetes,readOnly=true \
          --mount volume=etc-kubernetes,target=/etc/kubernetes \
          --volume etc-machine-id,kind=host,source=/etc/machine-id,readOnly=true \
          --mount volume=etc-machine-id,target=/etc/machine-id \
          --volume etc-os-release,kind=host,source=/usr/lib/os-release,readOnly=true \
          --mount volume=etc-os-release,target=/etc/os-release \
          --volume=etc-resolv,kind=host,source=/etc/resolv.conf,readOnly=true \
          --mount volume=etc-resolv,target=/etc/resolv.conf \
          --volume etc-ssl-certs,kind=host,source=/etc/ssl/certs,readOnly=true \
          --mount volume=etc-ssl-certs,target=/etc/ssl/certs \
          --volume lib-modules,kind=host,source=/lib/modules,readOnly=true \
          --mount volume=lib-modules,target=/lib/modules \
          --volume run,kind=host,source=/run \
          --mount volume=run,target=/run \
          --volume usr-share-certs,kind=host,source=/usr/share/ca-certificates,readOnly=true \
          --mount volume=usr-share-certs,target=/usr/share/ca-certificates \
          --volume var-lib-calico,kind=host,source=/var/lib/calico,readOnly=true \
          --mount volume=var-lib-calico,target=/var/lib/calico \
          --volume var-lib-docker,kind=host,source=/var/lib/docker \
          --mount volume=var-lib-docker,target=/var/lib/docker \
          --volume var-lib-kubelet,kind=host,source=/var/lib/kubelet,recursive=true \
          --mount volume=var-lib-kubelet,target=/var/lib/kubelet \
          --volume var-log,kind=host,source=/var/log \
          --mount volume=var-log,target=/var/log \
          --volume opt-cni-bin,kind=host,source=/opt/cni/bin \
          --mount volume=opt-cni-bin,target=/opt/cni/bin \
          --volume etc-iscsi,kind=host,source=/etc/iscsi \
          --mount volume=etc-iscsi,target=/etc/iscsi \
          --volume usr-sbin-iscsiadm,kind=host,source=/usr/sbin/iscsiadm \
          --mount volume=usr-sbin-iscsiadm,target=/sbin/iscsiadm \
%{ if enable_rbd_nbd == "true" ~}
          --volume rbdnbd,kind=host,source=/etc/modprobe.d/rbd-nbd.conf \
          --mount volume=rbdnbd,target=/etc/modprobe.d/rbd-nbd.conf \
%{ endif ~}
          $${KUBELET_IMAGE_URL}:$${KUBELET_IMAGE_TAG} \
          --exec=/usr/local/bin/kubelet -- \
          --anonymous-auth=false \
          --authentication-token-webhook \
          --authorization-mode=Webhook \
          --cgroup-driver=$${KUBELET_CGROUP_DRIVER} \
          --client-ca-file=/etc/kubernetes/ca.crt \
          --cluster_dns=${cluster_dns_service_ip} \
          --cluster_domain=${cluster_domain_suffix} \
          --cni-conf-dir=/etc/kubernetes/cni/net.d \
          --exit-on-lock-contention \
          --healthz-port=0 \
          --hostname-override=${domain_name} \
          --kubeconfig=/etc/kubernetes/kubeconfig \
          --lock-file=/var/run/lock/kubelet.lock \
          --network-plugin=cni \
          --node-labels=node.kubernetes.io/node \
          --pod-manifest-path=/etc/kubernetes/manifests \
          --read-only-port=0 \
%{ if length(taints) > 0 ~}
          --register-with-taints=${taints} \
%{ endif ~}
          --volume-plugin-dir=/var/lib/kubelet/volumeplugins \
          --max-pods=220 \
          --eviction-soft=memory.available<500Mi,nodefs.available<20%,nodefs.inodesFree<10%,imagefs.available<20%,imagefs.inodesFree<10% \
          --eviction-soft-grace-period=memory.available=2m,nodefs.available=2m,nodefs.inodesFree=2m,imagefs.available=2m,imagefs.inodesFree=2m
        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid
        Restart=always
        RestartSec=5
        [Install]
        WantedBy=multi-user.target

storage:
  directories:
    - path: /etc/kubernetes
      filesystem: root
  files:
    - path: /etc/kubernetes/kubelet.env
      filesystem: root
      mode: 0644
      contents:
        inline: |
          KUBELET_IMAGE_URL=docker://${kubelet_image}
          KUBELET_IMAGE_TAG=${kubelet_tag}
    - path: /etc/hostname
      filesystem: root
      mode: 0644
      contents:
        inline:
          ${domain_name}
    - path: /etc/sysctl.d/max-user-watches.conf
      filesystem: root
      contents:
        inline: |
          fs.inotify.max_user_watches=524288
          fs.inotify.max_user_instances=1024
%{ if enable_rbd_nbd == "true" ~}
    - path: /etc/modprobe.d/rbd-nbd.conf
      filesystem: root
      contents:
        inline: |
          install rbd /bin/true
          options nbd nbds_max=256
%{ endif ~}

passwd:
  users:
    - name: core
      ssh_authorized_keys:
        - ${ssh_authorized_key}

